.if_review: &if_review
  only:
    variables:
      - $REVIEW_INSTANCES == "true"
      - $CI_COMMIT_TAG == ""
  except:
  - staging
  - test
  - master
  - tags

.if_staging: &if_staging
  only:
  - staging
  except:
  - tags

.if_test: &if_test
  only:
  - test
  except:
  - tags

.if_production: &if_production
  only:
  - master
  except:
  - tags

stages:
- prepare
- check
- outdated
- test
- docs
- child-build-pipeline-generator
- build-images
- deploy
- cleanup

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  KUBECONFIG: /etc/kubeconfig
  KUBECTL_HELM_IMAGE: registry.gitlab.com/clecherbauer/docker-images/k8s-tools:helm-3
  REVIEW_HOST: review.selbstmade.ch
  REVIEW_INSTANCES: "true"

tag:
  stage: prepare
  image: docker:git
  <<: *if_production
  script:
  - git fetch --tags -f
  - if [ -z "$(git tag -l --points-at HEAD)" ]; then echo "There is no tag on this commit!"; exit 1; fi

build-docker-build-env:
  except:
  - tags
  stage: prepare
  image: docker:git
  script:
   - apk add --update bash;
   - .devops/bashops/write-docker-build-env.sh
  artifacts:
    paths:
    - .docker_build_env

shellcheck:
  image: koalaman/shellcheck-alpine:stable
  stage: check
  script:
  - find . -name "*.sh" -exec shellcheck {} +
  except:
  - staging
  - test
  - master
  - tags

validate-k8s:
  stage: check
  image: $KUBECTL_HELM_IMAGE
  before_script:
    - git clone $CI_REPOSITORY_URL repository
    - cd repository
    - git checkout $CI_COMMIT_SHA
    - git submodule update --init
    - echo "$SSH_KEY_CONTAINER" > /root/.ssh/id_rsa && rm -Rf /root/.ssh/id_rsa.pub
    - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
    - chmod 600 "$KUBECONFIG"
  script:
  - .devops/bashops/validate-k8s.sh
  variables:
    GIT_STRATEGY: none
  except:
  - staging
  - test
  - master
  - tags

.generate_child_build_pipeline_template: &generate_child_build_pipeline_template
  stage: child-build-pipeline-generator
  image: registry.gitlab.com/clecherbauer/docker-images/debian:bullseye
  script:
  - .devops/bashops/generate_child_build_pipeline.sh
  artifacts:
    paths:
      - child-build-pipeline-gitlab-ci.yml

generate_child_build_pipeline_review:
  <<: *generate_child_build_pipeline_template
  <<: *if_review
  when: manual

generate_child_build_pipeline_staging:
  <<: *generate_child_build_pipeline_template
  <<: *if_staging

generate_child_build_pipeline_test:
  <<: *generate_child_build_pipeline_template
  <<: *if_test

generate_child_build_pipeline_production:
  <<: *generate_child_build_pipeline_template
  <<: *if_production

trigger_child_pipeline_template_review:
  stage: build-images
  trigger:
    include:
      - artifact: child-build-pipeline-gitlab-ci.yml
        job: generate_child_build_pipeline_review
    strategy: depend
  needs:
    - generate_child_build_pipeline_review
  <<: *if_review

trigger_child_pipeline_template_staging:
  stage: build-images
  trigger:
    include:
      - artifact: child-build-pipeline-gitlab-ci.yml
        job: generate_child_build_pipeline_staging
    strategy: depend
  needs:
    - generate_child_build_pipeline_staging
  <<: *if_staging

trigger_child_pipeline_template_test:
  stage: build-images
  trigger:
    include:
      - artifact: child-build-pipeline-gitlab-ci.yml
        job: generate_child_build_pipeline_test
    strategy: depend
  needs:
    - generate_child_build_pipeline_test
  <<: *if_test

trigger_child_pipeline_template_production:
  stage: build-images
  trigger:
    include:
      - artifact: child-build-pipeline-gitlab-ci.yml
        job: generate_child_build_pipeline_production
    strategy: depend
  needs:
    - generate_child_build_pipeline_production
  <<: *if_production

.deploy_template: &deploy_template
  stage: deploy
  image: $KUBECTL_HELM_IMAGE
  script:
  - if [ -f .devops/deploy.sh ]; then .devops/deploy.sh; else .devops/bashops/deploy.sh; fi
  when: on_success
  retry: 2

deploy_review:
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.$REVIEW_HOST
    on_stop: stop_review
  before_script:
  - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  needs:
    - build-docker-build-env
    - trigger_child_pipeline_template_review
  <<: *deploy_template
  <<: *if_review

deploy_staging:
  before_script:
  - echo "$KUBECONFIG_STAGING" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  needs:
    - build-docker-build-env
    - trigger_child_pipeline_template_staging
  <<: *deploy_template
  <<: *if_staging

deploy_test:
  before_script:
  - echo "$KUBECONFIG_TEST" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  needs:
    - build-docker-build-env
    - trigger_child_pipeline_template_test
  <<: *deploy_template
  <<: *if_test

deploy_production:
  before_script:
  - echo "$KUBECONFIG_PRODUCTION" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  needs:
    - build-docker-build-env
    - trigger_child_pipeline_template_production
  <<: *deploy_template
  <<: *if_production

stop_review:
  stage: cleanup
  image: $KUBECTL_HELM_IMAGE
  before_script:
    - git clone $CI_REPOSITORY_URL repository
    - cd repository
    - git checkout $CI_COMMIT_SHA
    - git submodule update --init
    - echo "$SSH_KEY_CONTAINER" > /root/.ssh/id_rsa && rm -Rf /root/.ssh/id_rsa.pub
    - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
    - chmod 600 "$KUBECONFIG"
  script:
  - .devops/bashops/teardown.sh
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  <<: *if_review

.cleanup_template: &cleanup_template
  stage: cleanup
  image: $KUBECTL_HELM_IMAGE
  when: on_failure
  script:
  - echo "$SSH_KEY_CONTAINER" > /root/.ssh/id_rsa && rm -Rf /root/.ssh/id_rsa.pub
  - .devops/bashops/cleanup.sh

cleanup_deploy_staging:
  before_script:
  - echo "$KUBECONFIG_STAGING" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_staging

cleanup_deploy_test:
  before_script:
  - echo "$KUBECONFIG_TEST" > "$KUBECONFIG"
  - chmod 600 "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_test

cleanup_deploy_production:
  before_script:
   - echo "$KUBECONFIG_PRODUCTION" > "$KUBECONFIG"
   - chmod 600 "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_production
