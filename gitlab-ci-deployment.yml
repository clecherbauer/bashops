.if_review: &if_review
  only:
    variables:
      - $REVIEW_INSTANCES == "true"
      - $CI_COMMIT_TAG == ""
  except:
  - staging
  - test
  - master
  - tags

.if_staging: &if_staging
  only:
  - staging
  except:
  - tags

.if_test: &if_test
  only:
  - test
  except:
  - tags

.if_production: &if_production
  only:
  - master
  except:
  - tags

stages:
- prepare
- check
- outdated
- test
- docs
- build
- deploy
- logs
- cleanup

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  KUBECONFIG: /etc/kubeconfig
  KUBECTL_HELM_IMAGE: registry.gitlab.com/selbstmade/docker-images/kubectl-helm
  REVIEW_HOST: review.selbstmade.ch
  REVIEW_INSTANCES: "true"

tag:
  stage: prepare
  image: docker:git
  <<: *if_production
  script:
  - git fetch --tags -f
  - if [ -z "$(git tag -l --points-at HEAD)" ]; then echo "There is no tag on this commit!"; exit 1; fi

build-docker-build-env:
  stage: prepare
  image: docker:git
  script:
   - apk add --update bash;
   - .deployment/lib/write-docker-build-env.sh
  artifacts:
    paths:
    - .docker_build_env

shellcheck:
  image: koalaman/shellcheck-alpine:stable
  stage: check
  script:
  - find . -name "*.sh" -exec shellcheck {} +
  except:
  - tags

.build_template: &build_job_template
  stage: build
  image: docker:git
  services:
  - name: docker:dind
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  allow_failure: false
  script:
  - apk add --no-cache bash
  - echo "$SSH_KEY_CONTAINER" > id_rsa
  - .deployment/lib/build_and_push.sh

build_review:
  <<: *build_job_template
  <<: *if_review
  when: manual

build_staging:
  <<: *build_job_template
  <<: *if_staging

build_test:
  <<: *build_job_template
  <<: *if_test

build_production:
  <<: *build_job_template
  <<: *if_production

.deploy_template: &deploy_template
  stage: deploy
  image: $KUBECTL_HELM_IMAGE
  script:
  - if [ -f .deployment/deploy.sh ]; then .deployment/deploy.sh; else .deployment/lib/deploy.sh; fi

deploy_review:
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.$REVIEW_HOST
    on_stop: stop_review
  before_script:
  - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
  <<: *deploy_template
  <<: *if_review

deploy_staging:
  before_script:
  - echo "$KUBECONFIG_STAGING" > "$KUBECONFIG"
  <<: *deploy_template
  <<: *if_staging

deploy_test:
  before_script:
  - echo "$KUBECONFIG_TEST" > "$KUBECONFIG"
  <<: *deploy_template
  <<: *if_test

deploy_production:
  before_script:
  - echo "$KUBECONFIG_PRODUCTION" > "$KUBECONFIG"
  <<: *deploy_template
  <<: *if_production

stop_review:
  stage: cleanup
  image: $KUBECTL_HELM_IMAGE
  before_script:
    - git clone $CI_REPOSITORY_URL repository
    - cd repository
    - git checkout $CI_COMMIT_SHA
    - git submodule update --init
    - echo "$SSH_KEY_CONTAINER" > /root/.ssh/id_rsa && rm -Rf /root/.ssh/id_rsa.pub
    - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
  script:
  - .deployment/lib/teardown.sh
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  <<: *if_review

.logs_template: &logs_template
  stage: logs
  image: $KUBECTL_HELM_IMAGE
  when: always
  script:
    - .deployment/lib/collect_logs.sh

logs_review:
  before_script:
    - echo "$KUBECONFIG_REVIEW" > "$KUBECONFIG"
  <<: *logs_template
  <<: *if_review

logs_staging:
  before_script:
    - echo "$KUBECONFIG_STAGING" > "$KUBECONFIG"
  <<: *logs_template
  <<: *if_staging

logs_test:
  before_script:
    - echo "$KUBECONFIG_TEST" > "$KUBECONFIG"
  <<: *logs_template
  <<: *if_test

logs_production:
  before_script:
    - echo "$KUBECONFIG_PRODUCTION" > "$KUBECONFIG"
  <<: *logs_template
  <<: *if_production

.cleanup_template: &cleanup_template
  stage: cleanup
  image: $KUBECTL_HELM_IMAGE
  when: on_failure
  script:
  - echo "$SSH_KEY_CONTAINER" > /root/.ssh/id_rsa && rm -Rf /root/.ssh/id_rsa.pub
  - .deployment/lib/cleanup.sh

cleanup_deploy_staging:
  before_script:
  - echo "$KUBECONFIG_STAGING" > "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_staging

cleanup_deploy_test:
  before_script:
  - echo "$KUBECONFIG_TEST" > "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_test

cleanup_deploy_production:
  before_script:
   - echo "$KUBECONFIG_PRODUCTION" > "$KUBECONFIG"
  <<: *cleanup_template
  <<: *if_production
